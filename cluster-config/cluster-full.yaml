apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: eks-demo
  region: us-east-1
  version: "1.29"
  tags:
    karpenter.sh/discovery: eks-demo

# mind the known issues of `availabilityZones` if you are using eksctl 0.86.0:
# - https://github.com/weaveworks/eksctl/issues/4891
availabilityZones:
- us-east-1a
- us-east-1b

privateCluster:
  enabled: false

kubernetesNetworkConfig:
  ipFamily: IPv4
  serviceIPv4CIDR: 10.100.0.0/16

vpc:
  cidr: 192.168.0.0/16
  clusterEndpoints:
    privateAccess: true
    publicAccess: true
  manageSharedNodeSecurityGroupRules: true
  nat:
    gateway: HighlyAvailable # other options: Disable, Single (default)
  publicAccessCIDRs: # you should configured a proper CIDR list here
  - 0.0.0.0/0

accessConfig:
  authenticationMode: API_AND_CONFIG_MAP

iam:
  withOIDC: true
  # podIdentityAssociations:
  # - namespace: kube-system
  #   serviceAccountName: ebs-csi-controller-sa-self-managed
  #   roleName: pod-identity-role-for-ebs-csi-controller-self-managed
  #   permissionPolicyARNs:
  #     - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

managedNodeGroups:
  - name: mng-1
    amiFamily: AmazonLinux2
    minSize: 2
    maxSize: 5
    desiredCapacity: 2
    volumeSize: 30
    volumeType: gp3
    instanceTypes:
    - "t3a.small"
    enableDetailedMonitoring: true
    privateNetworking: true
    disableIMDSv1: true
    spot: true
    ssh:
      allow: false
    # availabilityZones:
    # - us-east-1a
    iam:
      attachPolicyARNs:
      - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
      # (Optional) Only required if you need "EC2 Instance Connect"
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      # (Optional) Only required if you are using "SSM"
      - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
      # (Optional) Only required if you have "Amazon CloudWatch Observability" setup
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

#   - name: amazonlinux-1
#     # AWS CLI:
#     # $ aws ec2 describe-images --image-ids $(aws ssm get-parameter --name /aws/service/eks/optimized-ami/1.29/amazon-linux-2/recommended/image_id --query "Parameter.Value" --output text)
#     ami: ami-0c482d7ce1aa0dd44 # amazon-eks-node-1.29-v20240117, ref: https://docs.aws.amazon.com/eks/latest/userguide/retrieve-ami-id.html
#     amiFamily: AmazonLinux2
#     minSize: 2
#     maxSize: 5
#     desiredCapacity: 2
#     volumeSize: 30
#     volumeType: gp3
#     instanceTypes:
#     - "t3a.small"
#     enableDetailedMonitoring: true
#     privateNetworking: true
#     disableIMDSv1: true
#     spot: true
#     ssh:
#       allow: false
#     overrideBootstrapCommand: |
#       #!/bin/bash
#       /etc/eks/bootstrap.sh eks-demo --container-runtime containerd
#
#   - name: ubuntu-1
#     # AWS CLI:
#     # $ aws ec2 describe-images --owners 099720109477 --filters "Name=name,Values=ubuntu-eks/k8s_1.28/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-2024*"
#     ami: ami-0da0e0ebf36ec0c2c # ubuntu-eks/k8s_1.28/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20231213.1, ref: https://cloud-images.ubuntu.com/aws-eks/
#     amiFamily: Ubuntu2004
#     minSize: 2
#     maxSize: 5
#     desiredCapacity: 2
#     volumeSize: 30
#     volumeType: gp3
#     instanceTypes:
#     - "t3a.small"
#     enableDetailedMonitoring: true
#     privateNetworking: true
#     disableIMDSv1: true
#     spot: true
#     ssh:
#       allow: false
#     overrideBootstrapCommand: |
#       #!/bin/bash
#       /etc/eks/bootstrap.sh eks-demo --container-runtime containerd
#
#   - name: bottlerocket-1
#     amiFamily: Bottlerocket
#     minSize: 2
#     maxSize: 5
#     desiredCapacity: 2
#     volumeSize: 30
#     volumeType: gp3
#     instanceTypes:
#     - "t3a.small"
#     enableDetailedMonitoring: true
#     privateNetworking: true
#     disableIMDSv1: true
#     spot: true
#     bottlerocket:
#       enableAdminContainer: true
#       settings:
#         motd: "Hello, Bottlerocket ~!"
#         kubernetes:
#           cluster-certificate:
#           api-server:
#           cluster-dns-ip:
#           node-labels:
#           node-taints:

# nodeGroups:
#   - name: ng-1
#     amiFamily: AmazonLinux2
#     # instancePrefix: mixed
#     minSize: 2
#     maxSize: 5
#     desiredCapacity: 2
#     volumeSize: 30
#     volumeType: gp3
#     instancesDistribution:
#       capacityRebalance: false
#       instanceTypes:
#       - "t3a.small"
#       maxPrice: 0.0376 # t3a.medium
#       onDemandBaseCapacity: 0
#       onDemandPercentageAboveBaseCapacity: 50
#       # spotInstancePools: 2
#       spotAllocationStrategy: "capacity-optimized-prioritized"
#     containerRuntime: containerd
#     enableDetailedMonitoring: true
#     privateNetworking: true
#     disableIMDSv1: true
#     ssh:
#       allow: false

# fargateProfiles:
#   - name: karpenter
#     selectors:
#       - namespace: karpenter
#         labels:
#           app.kubernetes.io/name: karpenter

addons:
  - name: vpc-cni
    version: latest
  - name: coredns
    version: latest
  - name: kube-proxy
    version: latest
  - name: eks-pod-identity-agent
    version: latest
  - name: amazon-cloudwatch-observability
    version: latest
  - name: aws-ebs-csi-driver
    version: latest
    attachPolicyARNs:
    - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
  - name: aws-efs-csi-driver
    version: latest
    attachPolicyARNs:
    - arn:aws:iam::aws:policy/service-role/AmazonEFSCSIDriverPolicy
  - name: snapshot-controller
    version: latest

cloudWatch:
  # ref: https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html
  clusterLogging:
    logRetentionInDays: 90
    enableTypes:
    - "api"
    - "audit"
    - "authenticator"
    - "controllerManager"
    - "scheduler"
